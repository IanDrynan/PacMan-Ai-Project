# search.py
# ---------
# Licensing Information: Please do not distribute or publish solutions to this
# project. You are free to use and extend these projects for educational
# purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
# John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html

"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util

class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return  [s,s,w,s,w,w,s,w]
    
def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first
    [2nd Edition: p 75, 3rd Edition: p 87]

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm
    [2nd Edition: Fig. 3.18, 3rd Edition: Fig 3.7].

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print "Start:", problem.getStartState()
    print "Is the start a goal?", problem.isGoalState(problem.getStartState())
    print "Start's successors:", problem.getSuccessors(problem.getStartState())
    """
    "*** YOUR CODE HERE ***"
    
    fringe = util.Stack()
    fringe.push(Node(problem.getStartState()))
    explored = [] #list of explored states
    
    while True:
        if fringe.isEmpty():
            return []
        
        currentNode = fringe.pop()
        
        if problem.isGoalState(currentNode.state):
            return currentNode.path
        
        if currentNode.state not in explored:
            for successor in problem.getSuccessors(currentNode.state):
                if successor[0] not in explored:
                    childNode = Node(successor[0])
                    childNode.setPath(currentNode.getPath())
                    childNode.path = childNode.path + [successor[1]]
                    fringe.push(childNode)
            
            explored.append(currentNode.state)
        else:
            return []
        
        
    
    return []

def breadthFirstSearch(problem):
    """
    Search the shallowest nodes in the search tree first.
    [2nd Edition: p 73, 3rd Edition: p 82]
    """
    "*** YOUR CODE HERE ***"

    startNode = Node(problem.getStartState())
    if problem.isGoalState(startNode.state):
            return currentNode.path

    fringe = util.Queue()
    fringe.push(startNode)
    explored = set() #list of explored states
    closed = set() #fringe and explored states
    closed.add(startNode)
    while True:
        if fringe.isEmpty():
            return []

        currentNode = fringe.pop()
        if currentNode.state not in explored:
            explored.add(currentNode.state)
            for successor in  problem.getSuccessors(currentNode.state):
                childNode = Node(successor[0])
                childNode.setPath(currentNode.getPath())
                childNode.addPath(successor[1])
                if problem.isGoalState(childNode.state):
                    return childNode.path
                if childNode.state not in closed:
                    fringe.push(childNode)
                    closed.add(childNode.state)


    return[]



def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    "[p 84]"
    "*** YOUR CODE HERE ***"
    fringe = util.PriorityQueue()
    fringe.push(Node(problem.getStartState()), 0)
    explored = [] #list of explored states
    closed = set() #fringe and explored states
    closed.add(problem.getStartState())

    while True:
        if fringe.isEmpty():
            return []

        currentNode = fringe.pop()

        if problem.isGoalState(currentNode.state):
            return currentNode.path

        explored.append(currentNode.state)

        for successor in problem.getSuccessors(currentNode.state):
            if successor[0] not in explored:
                childNode = Node(successor[0])
                childNode.setPath(currentNode.getPath())
                childNode.path = childNode.path + [successor[1]]

                fringe.push(childNode, problem.getCostOfActions(childNode.path))
                closed.add(childNode.state)


    return []

def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0

def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."
    "[p 99]"
    "*** YOUR CODE HERE ***"

    fringe = util.PriorityQueue()
    fringe.push(Node(problem.getStartState()), heuristic(problem.getStartState(), problem))
    explored = [] #list of explored states
    closed = set() #fringe and explored states
    closed.add(problem.getStartState())

    while True:
        if fringe.isEmpty():
            return []

        currentNode = fringe.pop()

        if problem.isGoalState(currentNode.state):
            return currentNode.path

        explored.append(currentNode.state)

        for successor in problem.getSuccessors(currentNode.state):
            if abs(heuristic(currentNode.state, problem) - heuristic(successor[0], problem)) > successor[2]:
                print "consistency problem", heuristic(currentNode.state, problem) - heuristic(successor[0], problem)
            if successor[0] not in explored:
                childNode = Node(successor[0])
                childNode.setPath(currentNode.getPath())
                childNode.path = childNode.path + [successor[1]]

                fringe.push(childNode,  problem.getCostOfActions(childNode.path) + heuristic(childNode.state, problem))

    return []

class Node:
    def __init__(self, state):
        self.state = state
        self.path = []
        self.cost = 0

    def setPath(self, p):
        self.path = p

    def addPath(self, p):
        self.path = self.path + [p]

    def getPath(self):
        return self.path
    

# Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
